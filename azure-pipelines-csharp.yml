# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml

name: Gravity.Core.$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

pool:
  name: Default

trigger:
  branches:
    include:
    - master

variables:
- group: browserstack.com
- name: 'Build.Configuration'
  value: 'Release'
- name: 'Parallel.Workers'
  value: '10'

steps:
- task: DotNetCoreCLI@2
  displayName: restore dependencies
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '6ed1caf9-de4f-48e8-8276-201533d86a19'
    verbosityRestore: 'Diagnostic'

- task: DotNetCoreCLI@2
  displayName: build projects
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(Build.Configuration)'

- powershell: |
   # read test settings
   [xml]$runSettings = Get-Content azure_settings_mstest.runsettings
   #
   # setup
   $workers = $runSettings.SelectSingleNode("//MSTest//Workers")
   #
   # override with production settings
   $workers.InnerText = '$(Parallel.Workers)'
   #
   # save settings
   $runSettings.Save("azure_settings_mstest_prod.runsettings")
  displayName: create test settings > override with production parameters

- task: DotNetCoreCLI@2
  displayName: execute unit testing
  inputs:
    command: 'test'
    projects: '**/*[Uu]nit*[Tt]ests/*.csproj'
    arguments: '--configuration $(Build.Configuration) -s azure_settings_mstest_prod.runsettings'
    testRunTitle: 'Unit Testing --- $(Build.BuildNumber)'

- task: DotNetCoreCLI@2
  displayName: execute integration testing
  inputs:
    command: 'test'
    projects: '**/*[Ii]ntegration*[Tt]ests/*.csproj'
    arguments: '--configuration $(Build.Configuration) -s azure_settings_mstest_prod.runsettings'
    testRunTitle: 'Integration Testing --- $(Build.BuildNumber)'

- powershell: |
   Remove-Item azure_settings_mstest_prod.runsettings
  displayName: cleanup

- task: DotNetCoreCLI@2
  displayName: create package
  inputs:
    command: 'pack'
    packagesToPack: '**/!(*[Tt]ests)/*.csproj'
    versioningScheme: 'byBuildNumber'
    verbosityPack: 'Diagnostic'
    packDirectory: $(Build.ArtifactStagingDirectory)

- task: NuGetCommand@2
  displayName: push package
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'nuget.org'

- task: PowerShell@2
  displayName: 'parse build version for GitHub tag'
  inputs:
    targetType: 'inline'
    script: |
      # setup
      [regex]$pattern = '(\d+.?)+'
      $version        = $pattern.Matches('$(Build.BuildNumber)') | foreach-object {$_.Value}      
      # set value
      Write-Host "##vso[task.setvariable variable=buildVersion]$version"

- task: GitHubRelease@1
  displayName: 'create GitHub tag'
  inputs:
    gitHubConnection: 'GitHub connection - Gravity API'
    repositoryName: 'gravity-api/gravity-core'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(buildVersion)'
    title: 'Production v$(buildVersion)'
    releaseNotesSource: 'inline'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'